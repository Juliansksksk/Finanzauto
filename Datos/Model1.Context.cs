//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Finanzauto.Datos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class pruebaJulianEntities : DbContext
    {
        public pruebaJulianEntities()
            : base("name=pruebaJulianEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Calificaciones> Calificaciones { get; set; }
        public virtual DbSet<Cursos> Cursos { get; set; }
        public virtual DbSet<Estudiantes> Estudiantes { get; set; }
        public virtual DbSet<Profesores> Profesores { get; set; }
    
        public virtual int ActualizarEstudiantes(Nullable<int> iD, string nombre, string apellido, string telefono, string curso)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var cursoParameter = curso != null ?
                new ObjectParameter("Curso", curso) :
                new ObjectParameter("Curso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarEstudiantes", iDParameter, nombreParameter, apellidoParameter, telefonoParameter, cursoParameter);
        }
    
        public virtual int ActualizarProfesores(Nullable<int> iD, string nombre, string apellido, string especialidad)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var especialidadParameter = especialidad != null ?
                new ObjectParameter("Especialidad", especialidad) :
                new ObjectParameter("Especialidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarProfesores", iDParameter, nombreParameter, apellidoParameter, especialidadParameter);
        }
    
        public virtual ObjectResult<BuscarEstudiante_Result> BuscarEstudiante()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarEstudiante_Result>("BuscarEstudiante");
        }
    
        public virtual ObjectResult<BuscarProfesor_Result> BuscarProfesor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BuscarProfesor_Result>("BuscarProfesor");
        }
    
        public virtual int EliminarEstudiantes(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarEstudiantes", iDParameter);
        }
    
        public virtual int EliminarProfesores(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarProfesores", iDParameter);
        }
    
        public virtual int InsertarEstudiantes(string nombre, string apellido, string telefono, string curso)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var cursoParameter = curso != null ?
                new ObjectParameter("Curso", curso) :
                new ObjectParameter("Curso", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarEstudiantes", nombreParameter, apellidoParameter, telefonoParameter, cursoParameter);
        }
    
        public virtual int InsertarProfesores(string nombre, string apellido, string especialidad)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("Apellido", apellido) :
                new ObjectParameter("Apellido", typeof(string));
    
            var especialidadParameter = especialidad != null ?
                new ObjectParameter("Especialidad", especialidad) :
                new ObjectParameter("Especialidad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarProfesores", nombreParameter, apellidoParameter, especialidadParameter);
        }
    }
}
